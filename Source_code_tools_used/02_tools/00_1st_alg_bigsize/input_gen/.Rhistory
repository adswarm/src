rm(list = ls())
library(plyr)
library(readr)
library(scales)
library(plyr)
library(conicfit) #library(concaveman)
library(geometry)
library(retistruct)
library(pracma)
library(MASS)
library(ggplot2)
library("shotGroups")
# source("C:/Users/Chijung Jung/source/R_project/lib/functions.R")
source("~/Research/tool_project_swarm_safety/lib/functions.R") # Linux version
source("~/Research/tool_project_swarm_safety/Preprocessing_R/possible_space/possible_space.R") # Linux version
set.seed(2)
fct.formation_bigsize <- function(leader_des.x, leader_des.y){
# if(which_f == 'f1'){
#   formation.x <- x - 1 * 0.3 * sqrt(3) / 2 + -0 * 0.3 / 2
#   formation.y <- y - 0 * 0.3 * sqrt(3) / 2 + 1 * 0.3 / 2
# }else if(which_f == 'f2'){
#   formation.x <- x - 1 * 0.3 * sqrt(3) / 2 + 0 * 0.3 / 2
#   formation.y <- y - 0 * 0.3 * sqrt(3) / 2 - 1 * 0.3 / 2
# }else if(which_f == 'f3'){
#   formation.x <- x - 1 * 0.3 * sqrt(3)
#   formation.y <- y - 0 * 0.3 * sqrt(3)
# }
# formation_point <- c(formation.x, formation.y)
v.x <- 1.0
v.y <- 0.0
l <- 0.3
u.x <- 0
u.y <- 1
des2.x = leader_des.x - v.x*l*sqrt(3)/2 + u.x*l/2
des2.y = leader_des.y - v.y*l*sqrt(3)/2 + u.y*l/2
des3.x = leader_des.x - v.x*l*sqrt(3)/2 - u.x*l/2
des3.y = leader_des.y - v.y*l*sqrt(3)/2 - u.y*l/2
# 3rd row
des4.x = leader_des.x - v.x*l*sqrt(3)
des4.y = leader_des.y - v.y*l*sqrt(3)
des5.x = leader_des.x - v.x*l*sqrt(3)   + u.x*l
des5.y = leader_des.y - v.y*l*sqrt(3)   + u.y*l
des6.x = leader_des.x - v.x*l*sqrt(3)   - u.x*l
des6.y = leader_des.y - v.y*l*sqrt(3)   - u.y*l
# 4th row
des7.x = leader_des.x - v.x*l*sqrt(3)*3/2 - u.x*l/2
des7.y = leader_des.y - v.y*l*sqrt(3)*3/2 - u.y*l/2
des8.x = leader_des.x - v.x*l*sqrt(3)*3/2 + u.x*l/2
des8.y = leader_des.y - v.y*l*sqrt(3)*3/2 + u.y*l/2
des9.x = leader_des.x - v.x*l*sqrt(3)*3/2 - u.x*l*3/2
des9.y = leader_des.y - v.y*l*sqrt(3)*3/2 - u.y*l*3/2
des10.x = leader_des.x - v.x*l*sqrt(3)*3/2 + u.x*l*3/2
des10.y = leader_des.y - v.y*l*sqrt(3)*3/2 + u.y*l*3/2
# 5th row
des11.x = leader_des.x - v.x*l*sqrt(3)*2
des11.y = leader_des.y - v.y*l*sqrt(3)*2
des12.x = leader_des.x - v.x*l*sqrt(3)*2   + u.x*l
des12.y = leader_des.y - v.y*l*sqrt(3)*2   + u.y*l
des13.x = leader_des.x - v.x*l*sqrt(3)*2   - u.x*l
des13.y = leader_des.y - v.y*l*sqrt(3)*2   - u.y*l
# 6th row
des14.x = leader_des.x - v.x*l*sqrt(3)*5/2 + u.x*l/2
des14.y = leader_des.y - v.y*l*sqrt(3)*5/2 + u.y*l/2
des15.x = leader_des.x - v.x*l*sqrt(3)*5/2 - u.x*l/2
des15.y = leader_des.y - v.y*l*sqrt(3)*5/2 - u.y*l/2
des16.x = leader_des.x - v.x*l*sqrt(3)*5/2 + u.x*l*3/2
des16.y = leader_des.y - v.y*l*sqrt(3)*5/2 + u.y*l*3/2
des17.x = leader_des.x - v.x*l*sqrt(3)*5/2 - u.x*l*3/2
des17.y = leader_des.y - v.y*l*sqrt(3)*5/2 - u.y*l*3/2
# 7th row
des18.x = leader_des.x - v.x*l*sqrt(3)*3
des18.y = leader_des.y - v.y*l*sqrt(3)*3
des19.x = leader_des.x - v.x*l*sqrt(3)*3   + u.x*l
des19.y = leader_des.y - v.y*l*sqrt(3)*3   + u.y*l
des20.x = leader_des.x - v.x*l*sqrt(3)*3   - u.x*l
des20.y = leader_des.y - v.y*l*sqrt(3)*3   - u.y*l
formation_point <- c(des2.x, des2.y, des3.x, des3.y, des4.x, des4.y, des5.x, des5.y, des6.x, des6.y,
des7.x, des7.y, des8.x, des8.y, des9.x, des9.y, des10.x, des10.y, des11.x, des11.y,
des12.x, des12.y, des13.x, des13.y, des14.x, des14.y, des15.x, des15.y, des16.x, des16.y,
des17.x, des17.y, des18.x, des18.y, des19.x, des19.y, des20.x, des20.y )
return(formation_point)
}
fct.mySampler <-function(n, m.x, m.y, s.x, s.y, bound){
# n <- 1000
# m <- 0
# s <- 1
ground_y <- -4.97
samp.x <- rnorm(n, m.x, s.x)
samp.y <- rnorm(n, m.y, s.y)
samp.coor <- data.frame(samp.x, samp.y)
det2 <- samp.coor$samp.y > ground_y
samp.coor <- samp.coor[det2, ]
return(samp.coor)
}
fct.myTrimmer <-function(n, m.x, m.y, s.x, s.y, bound){
# n <- 1000
# m <- 0
# s <- 1
ground_y <- -4.97
enough_n <- 3 * n
samp.x <- rnorm(enough_n, m.x, s.x)
samp.y <- rnorm(enough_n, m.y, s.y)
samp.coor <- data.frame(samp.x, samp.y)
det <- (samp.coor$samp.x - m.x)^2 + (samp.coor$samp.y - m.y)^2 <= bound^2
innercircle.coor <- samp.coor[det,]
det2 <- innercircle.coor$samp.y > ground_y
innercircle.coor <- innercircle.coor[det2, ]
return(innercircle.coor[1:n,])
}
fct.myTrimmer_uniform <-function(n, m.x, m.y, bound){
# n <- 1000
# m <- 0
# s <- 1
ground_y <- -4.97
enough_n <- 3 * n
samp.x <- runif(enough_n, m.x - bound, m.x + bound)
samp.y <- runif(enough_n, m.y - bound, m.y + bound)
samp.coor <- data.frame(samp.x, samp.y)
det <- (samp.coor$samp.x - m.x)^2 + (samp.coor$samp.y - m.y)^2 <= bound^2
innercircle.coor <- samp.coor[det,]
det2 <- innercircle.coor$samp.y > ground_y
innercircle.coor <- innercircle.coor[det2, ]
return(innercircle.coor[1:n,])
}
########
##############
# configurations
##############
param.culumn_O_remove <- c(16,17,20,21) # <-  1stO.x     1stO.y     2ndO.x   2ndO.y
param.culumn_etc_remove <- c(1:7)
param.mode.savePlot = TRUE
mode.remove_close_coordinates = FALSE
# directory for input
# base_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/00_00_randomtesting/",sep="" )
output_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/output/",sep="" )
# base directory
# directory for input
# directory for output
output_directory_randomized_data = output_directory#paste(output_directory_randomized_data,"1000/",sep="" )
##############
# Reading data
# refer: https://lightblog.tistory.com/13
# factor, refer: https://rfriend.tistory.com/32
# which, refer: http://egloos.zum.com/entireboy/v/4837061
##############
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/input")
datalist
i <- 1 # old version: "integ_1_86_101_149_all_sp.csv" new version:
filename <- datalist[i]
filename
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/input/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1)
colnames(data_raw) <- c("rollback", "rand_seed", "rand_seed", "modi_param", "modi_param", "vari", "from", "modi_start", "sim", "recog_time", "version",
"l.x", "l.y", "f1.x", "f1.y", "f2.x", "f2.y", "f3.x", "f3.y","f4.x", "f4.y",
"f5.x", "f5.y","f6.x", "f6.y","f7.x", "f7.y","f8.x", "f8.y","f9.x", "f9.y",
"f10.x", "f10.y","f11.x", "f11.y","f12.x", "f12.y","f13.x", "f13.y","f14.x", "f14.y",
"f15.x", "f15.y","f16.x", "f16.y","f17.x", "f17.y","f18.x", "f18.y","f19.x", "f19.y",
"1stO.x", "1stO.y", "3rdO.x", "3rdO.y", "2ndO.x", "2ndO.y",
"l_g.x", "l_g.y", "f1_g.x", "f1_g.y", "f2_g.x", "f2_g.y", "f3_g.x", "f3_g.y","f4_g.x", "f4_g.y",
"f5_g.x", "f5_g.y","f6_g.x", "f6_g.y","f7_g.x", "f7_g.y","f8_g.x", "f8_g.y","f9_g.x", "f9_g.y",
"f10_g.x", "f10_g.y","f11_g.x", "f11_g.y","f12_g.x", "f12_g.y","f13_g.x", "f13_g.y","f14_g.x", "f14_g.y",
"f15_g.x", "f15_g.y","f16_g.x", "f16_g.y","f17_g.x", "f17_g.y","f18_g.x", "f18_g.y","f19_g.x", "f19_g.y",
"crash", "who", "with", "when", "trapped")
data_raw <- na.omit(data_raw)
data_raw <- data_raw[data_raw$version == -2,]
# remove unrelevant data column
data_raw_preproc_1 <- data_raw[, -c(2, 4, 7, 9)]
data_raw_preproc_1 <- cbind(data_raw_preproc_1, data_raw_preproc_1$modi_start)
# remove version -1, -3 and -4 data
data_raw_preproc_1 <- data_raw_preproc_1[data_raw_preproc_1$version==-2,]
# leader aligned
new_l.x <- as.numeric(as.matrix(data_raw_preproc_1$l.x)) - data_raw_preproc_1$'3rdO.x'
new_l.y <- as.numeric(as.matrix(data_raw_preproc_1$l.y)) - data_raw_preproc_1$'3rdO.y'
data_raw_preproc_2 <- cbind(data_raw_preproc_1, new_l.x, new_l.y)
# follower aligned
new_f1.x <- as.numeric(as.matrix(data_raw_preproc_1$f1.x)) - as.numeric(as.matrix(data_raw_preproc_1$l.x))
new_f1.y <- as.numeric(as.matrix(data_raw_preproc_1$f1.y)) - as.numeric(as.matrix(data_raw_preproc_1$l.y))
new_f2.x <- as.numeric(as.matrix(data_raw_preproc_1$f2.x)) - as.numeric(as.matrix(data_raw_preproc_1$l.x))
new_f2.y <- as.numeric(as.matrix(data_raw_preproc_1$f2.y)) - as.numeric(as.matrix(data_raw_preproc_1$l.y))
new_f3.x <- as.numeric(as.matrix(data_raw_preproc_1$f3.x)) - as.numeric(as.matrix(data_raw_preproc_1$l.x))
new_f3.y <- as.numeric(as.matrix(data_raw_preproc_1$f3.y)) - as.numeric(as.matrix(data_raw_preproc_1$l.y))
data_raw_preproc_2 <- cbind(data_raw_preproc_2, new_f1.x, new_f1.y, new_f2.x, new_f2.y, new_f3.x, new_f3.y)
# divide
# 알로 쪼개고
# 롤백 버전별로 쪼개고
# 0.2 2.0으로 쪼갠다
###############
####       HERE
###############
parameter_target = 'i' # fixed for now
target_param = paste("[", parameter_target,"]", sep="")#<--- fixed
coef_param = 2.0 #<--- fixed
rollback_ver = 0 #<--- fixed
mode_set = c('f1', 'f2', 'f3') # <--- HERE
# for(mode in mode_set){
r.integrated <- data_raw_preproc_2[data_raw_preproc_2$modi_param==target_param,]
r.integrated_rb_100 <- r.integrated[r.integrated$rollback==rollback_ver,]
r.integrated_rb_100_02 <- r.integrated_rb_100[r.integrated_rb_100$vari=="x[0.2]",]
r.integrated_rb_100_20 <- r.integrated_rb_100[r.integrated_rb_100$vari=="x[2.000000]",]
target_origin <- r.integrated[r.integrated$rollback==0,]
target_origin_02 <- target_origin[target_origin$vari=="x[0.2]",]
target_origin_20 <- target_origin[target_origin$vari=="x[2.000000]",]
################
### set the target_table
if(coef_param == 0.2){
target_table <- r.integrated_rb_100_02
target_to_compare <- target_origin_02
}else if(coef_param == 2.0){
target_table <- r.integrated_rb_100_20
target_to_compare <- target_origin_20
}
# outputplotdir <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/02_01_output_plot/",filename,target_param,coef_param,mode,".png",sep="" )
# if(param.mode.savePlot == TRUE) {png(outputplotdir, width = 500, height = 500, units = "px")}
################
length(target_table$l.x)
# plot(target_table$f1.x, target_table$f1.y)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# leader
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
number_gen_whole <- 10000
# load data
l.data_x <- target_table$l.x
l.data_y <- target_table$l.y
# make data frame
l.df2 = data.frame(l.data_x, l.data_y)
colnames(l.df2) <- c('x', 'y')
l.temp_CEPlevel <- 0.9
(l.cep <- getCEP(l.df2, CEPlevel=l.temp_CEPlevel, accuracy=FALSE,
dstTarget=10, conversion='m2mm',
type=c('Rayleigh')))
l.center_x <- l.cep$ctr[1]
l.center_y <- l.cep$ctr[2]
l.center_r <- l.cep$CEP$CEP0.9['unit', 'Rayleigh']
number_gen.l <- number_gen_whole
mean.l.x <- l.center_x
mean.l.y <- l.center_y
sd.l.x <- sd(l.data_x)# * 1.1
sd.l.y <- sd(l.data_y)# * 1.1
l.radius <- l.center_r
# this guy shouldn't use bound
l.coor <- fct.mySampler(number_gen.l, mean.l.x, mean.l.y, sd.l.x, sd.l.y, l.radius)
commonTheme = list(labs(color="Density",fill="Density",
x="x",
y="y"),
theme_bw(),
theme(legend.position=c(0,1),
legend.justification=c(0,1)))
ggplot(data=l.df2,aes(x, y ) ) +
xlim(-1.5, 2.5) +
ylim(-4.5, -2.0) +
geom_density2d(aes(colour=..level..)) +
scale_colour_gradient(low="green",high="red") +
geom_point() +
annotate("path",
x=l.center_x+l.center_r*cos(seq(0,2*pi,length.out=100)),
y=l.center_y+l.center_r*sin(seq(0,2*pi,length.out=100))) +
annotate("point", x = l.center_x, y = l.center_y, colour = "red", pch = 17) +
annotate("point", x = l.coor$samp.x, y = l.coor$samp.y, colour = "blue", pch = 8) +
# annotate("point", x = l.coor2$samp.x, y = l.coor2$samp.y, colour = "red", pch = 8) +
commonTheme
outputplotdir2 <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/output/",filename,target_param,coef_param,"l",".png",sep="" )
ggsave(outputplotdir2) # refer: https://ggplot2.tidyverse.org/reference/ggsave.html
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# follower
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
head(data_raw[,14], 5)
head(data_raw$f1.x, 5)
CEP_data <- NULL
for (mode in 0:18){
# for (mode in c('f1','f2','f3')){
# mode <- 7
# load data
x_index <- (mode + 7) * 2
y_index <- (mode + 7) * 2 + 1
data_x <- data_raw[,x_index]
data_y <- data_raw[,y_index]
data_x <- as.numeric(as.matrix(data_x))
data_y <- as.numeric(as.matrix(data_y))
# if(mode == 'f1'){
#   data_x <- target_table$f1.x
#   data_y <- target_table$f1.y
# }else if(mode == 'f2'){
#   data_x <- target_table$f2.x
#   data_y <- target_table$f2.y
# }else if(mode == 'f3'){
#   data_x <- target_table$f3.x
#   data_y <- target_table$f3.y
# }
#
# make data frame
df2 = data.frame(data_x, data_y)
colnames(df2) <- c('x', 'y')
temp_CEPlevel <- 0.9
(cep <- getCEP(df2, CEPlevel=temp_CEPlevel, accuracy=FALSE,
dstTarget=10, conversion='m2mm',
type=c('Rayleigh')))
center_x <- cep$ctr[1]
center_y <- cep$ctr[2]
center_r <- cep$CEP$CEP0.9['unit', 'Rayleigh']
# CEP
number_gen.f <- number_gen_whole * 0.6
mean.f.x <- center_x
mean.f.y <- center_y
sd.f.x <- sd(data_x)
sd.f.y <- sd(data_y)
f.radius <- center_r
f.coor <- fct.myTrimmer(number_gen.f, mean.f.x, mean.f.y, sd.f.x, sd.f.y, f.radius)
# plot(f.coor, col = "blue", xlim = c(-2.0, 1.0), ylim = c(-2.5, 1.0))
# Unif in possible space
number_gen.f.2 <- number_gen_whole - number_gen.f
mean.f.x.2 <- 0.0 #fixed #depricated
mean.f.y.2 <- 0.0 #fixed #depricated
from_restriction <- 2.0 #fixed
#
# if(mode == 'f3'){
#   from_restriction <- 1.0 #fixed
# }else{
#   from_restriction <- 0.8 #fixed
# }
f.radius.2 <- 0.5 * abs(min(l.coor$samp.x) - max(l.coor$samp.x)) + from_restriction
f.coor2 <- fct.myTrimmer_uniform(number_gen.f.2, l.center_x, l.center_y, f.radius.2)
formation_goal <- fct.formation_bigsize(l.center_x, l.center_y)
f.coor2 <- fct.myTrimmer_uniform(number_gen.f.2, formation_goal[((mode * 2) + 1)], formation_goal[((mode * 2) + 2)], from_restriction)
# below code is optional
# f.coor2 <- fct.myTrimmer_uniform(number_gen.f.2, mean.f.x.2, mean.f.y.2, f.radius.2)
plot(f.coor2, xlim = c(-2.0, 1.0), ylim = c(-2.5, 1.0))
# should be aligned again based on the leader's coordinates
# aligned_f.p_s.x <- f.coor2$samp.x + l.coor$samp.x[(nrow(l.coor)-nrow(f.coor2) + 1):nrow(l.coor)]
# aligned_f.p_s.y <- f.coor2$samp.y + l.coor$samp.y[(nrow(l.coor)-nrow(f.coor2) + 1):nrow(l.coor)]
# points(aligned_f.p_s.x, aligned_f.p_s.y, col = 'red')
# plotting
# xlim(-4.0, 0.0) +
#   ylim(-4.5, -2.0) +
ggplot(data=df2,aes(x, y ) ) +
xlim(-2.5, 2.5) +
ylim(-4.5, -2.0) +
geom_density2d(aes(colour=..level..)) +
scale_colour_gradient(low="green",high="red") +
geom_point() +
annotate("path",
x=center_x+center_r*cos(seq(0,2*pi,length.out=100)),
y=center_y+center_r*sin(seq(0,2*pi,length.out=100))) +
annotate("point", x = center_x, y = center_y, colour = "red", pch = 17) +
annotate("point", x = f.coor$samp.x, y = f.coor$samp.y, colour = "blue", pch = 8) +
annotate("point", x = f.coor2$samp.x, y = f.coor2$samp.y, colour = "green", pch = 8) +
# annotate("point", x = aligned_f.p_s.x, y = aligned_f.p_s.y, colour = "red", pch = 8) +
commonTheme
outputplotdir2 <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/output/",filename,target_param,coef_param,mode,".png",sep="" )
ggsave(outputplotdir2) # refer: https://ggplot2.tidyverse.org/reference/ggsave.html
# save data
# if(mode == 'f1'){
#   CEP_f1 <- rbind(f.coor, f.coor2)
# }else if(mode == 'f2'){
#   CEP_f2 <- rbind(f.coor, f.coor2)
# }else if(mode == 'f3'){
#   CEP_f3 <- rbind(f.coor, f.coor2)
# }
CEP_data_temp <- rbind(f.coor, f.coor2) # 1: f1.x, 2:f1.y, 3:f2.x, 4:f2.y
if(is.null(CEP_data)){
CEP_data <- CEP_data_temp
}else{
CEP_data <- cbind(CEP_data, CEP_data_temp)
}
}
###
# make the format fitting to 5000 data
###
test = 1
if(test == 1){
target_table_intercept <- read.csv(file = "~/Research/tool_project_swarm_safety/Preprocessing_R/1st_alg_bigsize/input_gen/input/temp_for_sd_3.0.csv", header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1)
}
target_table_intercept_10000 <- NULL
for(repead_idx in 1: 50000){
target_table_intercept_10000 <- rbind(target_table_intercept_10000, target_table_intercept)
if(nrow(target_table_intercept_10000)>number_gen_whole){
break
}
}
target_table_intercept_10000 <- target_table_intercept_10000[1:number_gen_whole,]
nrow(target_table_intercept_10000)
colnames(target_table_intercept_10000) <- colnames(data_raw)
head(target_table$l.x, 5)
head(target_table_intercept_10000$l.x, 5)
nrow(target_table)
CEP_target_table <- NULL
for(repead_idx in 1: 50000){
CEP_target_table <- rbind(CEP_target_table, target_table)
if(nrow(CEP_target_table)>number_gen_whole){
break
}
}
CEP_target_table <- CEP_target_table[1:number_gen_whole,]
nrow(CEP_target_table)
# Implant
head(CEP_target_table$l.x, 5)
head(target_table_intercept_10000$l.x, 5)
CEP_target_table$recog_time <- target_table_intercept_10000$recog_time
CEP_target_table$l.x <- target_table_intercept_10000$l.x
CEP_target_table$l.y <- target_table_intercept_10000$l.y
# Implant
head(CEP_target_table$l.x, 5)
head(target_table_intercept_10000$l.x, 5)
### 10 is index for f1.x
head(CEP_target_table[, 10], 5)
head(CEP_target_table$f1.x, 5)
head(CEP_target_table, 5)
###
mode_switch = 1
if(mode_switch == 1){
for (follower_idx in 0:18){
x_index <- (follower_idx + 5) * 2
y_index <- (follower_idx + 5) * 2 + 1
x_index_subset <- follower_idx * 2 - 1
y_index_subset <- follower_idx * 2
CEP_target_table[, x_index] <- CEP_data[,x_index_subset] + ( CEP_target_table$l.x - l.coor$samp.x)
CEP_target_table[, y_index] <- CEP_data[,y_index_subset] + ( CEP_target_table$l.y - l.coor$samp.y)
}
# CEP_target_table$f1.x <- CEP_f1$samp.x + ( CEP_target_table$l.x - l.coor$samp.x)
# CEP_target_table$f1.y <- CEP_f1$samp.y + ( CEP_target_table$l.y - l.coor$samp.y)
#
# CEP_target_table$f2.x <- CEP_f2$samp.x + ( CEP_target_table$l.x - l.coor$samp.x)
# CEP_target_table$f2.y <- CEP_f2$samp.y + ( CEP_target_table$l.y - l.coor$samp.y)
#
# CEP_target_table$f3.x <- CEP_f3$samp.x + ( CEP_target_table$l.x - l.coor$samp.x)
# CEP_target_table$f3.y <- CEP_f3$samp.y + ( CEP_target_table$l.y - l.coor$samp.y)
}else if(mode_switch == 2){
CEP_target_table$l.x <- l.coor$samp.x
CEP_target_table$l.y <- l.coor$samp.y
CEP_target_table$f1.x <- CEP_f1$samp.x
CEP_target_table$f1.y <- CEP_f1$samp.y
CEP_target_table$f2.x <- CEP_f2$samp.x
CEP_target_table$f2.y <- CEP_f2$samp.y
CEP_target_table$f3.x <- CEP_f3$samp.x
CEP_target_table$f3.y <- CEP_f3$samp.y
}
###
# prunning unnecessary coordinates
###
# for (follower_idx in 0:18){
#
#   x_index <- (follower_idx + 5) * 2
#   y_index <- (follower_idx + 5) * 2 + 1
#
#   x_index_subset <- follower_idx * 2 - 1
#   y_index_subset <- follower_idx * 2
#
#   # CEP_target_table <- CEP_data[,x_index_subset] + ( CEP_target_table$l.x - l.coor$samp.x)
#   CEP_target_table <- CEP_target_table[which(CEP_target_table[,y_index] > -4.5),]
# }
# head(CEP_data[which(CEP_data[,10] > -2.0),], 5)
nrow(CEP_target_table)
# this process can yield the exception
###
# Prune out weird things
###
library(stringr)
CEP_target_table$rand_seed <- as.numeric(gsub("[^0-9A-Za-z///' ]","" , CEP_target_table$rand_seed ,ignore.case = TRUE))
CEP_target_table$modi_param <- gsub("[^0-9A-Za-z///' ]","" , CEP_target_table$modi_param ,ignore.case = TRUE)
CEP_target_table$vari <- gsub("(?!\\.)[[:punct:]]", "", CEP_target_table$vari, perl=TRUE)
CEP_target_table$vari <- as.numeric(gsub("x", "", CEP_target_table$vari, perl=TRUE))
CEP_target_table$modi_start <- as.numeric(gsub("[^0-9A-Za-z///' ]","" , CEP_target_table$modi_start ,ignore.case = TRUE))
CEP_target_table$recog_time <- as.numeric(gsub("[^0-9A-Za-z///' ]","" , CEP_target_table$recog_time ,ignore.case = TRUE))
CEP_target_table$version <- as.numeric(CEP_target_table$version)
CEP_target_table$l.x <- as.numeric(as.matrix(CEP_target_table$l.x))
########
######## writing
# 3. write into file
if(coef_param == 2.0){
coef_param_temp = '2.0'
}else if(coef_param == 0.2){
coef_param_temp = '0.2'
}
output_directory_randomized_data1 <- paste(output_directory_randomized_data, parameter_target, "/", sep="")
output_filename <- paste(parameter_target,"_x",coef_param_temp,"_rollback_",rollback_ver ,sep="")
table_final_name = paste(output_directory_randomized_data1, "randomized_",output_filename,".csv",sep="")
write.csv(CEP_target_table, file = table_final_name, row.names = FALSE)
