rm(list = ls())
library(plyr)
library(readr)
library(scales)
library(plyr)
library(conicfit) #library(concaveman)
library(geometry)
library(retistruct)
library(pracma)
library(MASS)
library(ggplot2)
library("shotGroups")
library(plotly)
# source("C:/Users/Chijung Jung/source/R_project/lib/functions.R")
source("~/Research/tool_project_swarm_safety/lib/functions.R") # Linux version
source("~/Research/tool_project_swarm_safety/Preprocessing_R/possible_space/possible_space.R") # Linux version
set.seed(1)
fct.mySampler <-function(n, m.x, m.y, s.x, s.y, bound){
# n <- 1000
# m <- 0
# s <- 1
samp.x <- rnorm(n, m.x, s.x)
samp.y <- rnorm(n, m.y, s.y)
samp.coor <- data.frame(samp.x, samp.y)
det2 <- samp.coor$samp.y > -2.5
samp.coor <- samp.coor[det2, ]
return(samp.coor)
}
fct.myTrimmer <-function(n, m.x, m.y, s.x, s.y, bound){
# n <- 1000
# m <- 0
# s <- 1
enough_n <- 3 * n
samp.x <- rnorm(enough_n, m.x, s.x)
samp.y <- rnorm(enough_n, m.y, s.y)
samp.coor <- data.frame(samp.x, samp.y)
det <- (samp.coor$samp.x - m.x)^2 + (samp.coor$samp.y - m.y)^2 <= bound^2
innercircle.coor <- samp.coor[det,]
det2 <- innercircle.coor$samp.y > -2.5
innercircle.coor <- innercircle.coor[det2, ]
return(innercircle.coor[1:n,])
}
fct.myTrimmer_uniform <-function(n, m.x, m.y, bound){
# n <- 1000
# m <- 0
# s <- 1
enough_n <- 3 * n
samp.x <- runif(enough_n, m.x - bound, m.x + bound)
samp.y <- runif(enough_n, m.y - bound, m.y + bound)
samp.coor <- data.frame(samp.x, samp.y)
det <- (samp.coor$samp.x - m.x)^2 + (samp.coor$samp.y - m.y)^2 <= bound^2
innercircle.coor <- samp.coor[det,]
det2 <- innercircle.coor$samp.y > -2.5
innercircle.coor <- innercircle.coor[det2, ]
return(innercircle.coor[1:n,])
}
fct.make_sphere = function(gen_nb, center_x, center_y, center_z, center_r){
# center_x <- 144.6478
# center_y <- 86.09045
# center_z <- -11.33051
# center_r <- 16.20963
#
# gen_nb <- 100000
gen.x <- runif(gen_nb, min = (center_x - center_r), max = (center_x + center_r))
gen.y <- runif(gen_nb, min = (center_y - center_r), max = (center_y + center_r))
gen.z <- runif(gen_nb, min = (center_z - center_r), max = (center_z + center_r))
df <- data.frame(gen.x, gen.y, gen.z)
det <- (gen.x - center_x)^2 + (gen.y - center_y)^2 + (gen.z - center_z)^2 < center_r^2
df_trimmed <- df[det, ]
return(df_trimmed)
}
# for agent2 (first drone)
# a1   18  x/y/z/norm/r:  145.0596   84.01725   -12.10435   168.0705   23.75571
# a2   18  x/y/z/norm/r:  144.6478   86.09045   -11.33051   168.7096   16.20963
# a3   18  x/y/z/norm/r:  144.7474   82.30505   -11.48442   166.9066   24.29293
df_agent2 <- fct.make_sphere(100000, 144.6478, 86.09045, 11.33051, 16.20963)
df_agent2
fig1 <- plot_ly(df_agent2, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
fig1
# obst
obst.x <- 150
obst.y <- 112.6
desired_dist_lb <- 18.75 + 10
desired_dist_ub <- 18.75 + 10 + 2
# consider lower bound
current_dist_lb <- sqrt((df_agent2$gen.x - obst.x)^2 + (df_agent2$gen.y - obst.y)^2)
current_dist_lb
det_agent2_lb <- current_dist_lb >= desired_dist_lb #&& current_dist <= desired_dist_ub
det_agent2_lb
df_agent2_trimmed_lb <- df_agent2[det_agent2_lb,]
nrow(df_agent2_trimmed_lb)
fig_lb <- plot_ly(df_agent2_trimmed_lb, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
fig_lb
# consider upper bound
current_dist_ub <- sqrt((df_agent2_trimmed_lb$gen.x - obst.x)^2 + (df_agent2_trimmed_lb$gen.y - obst.y)^2)
det_agent2_ub <- current_dist_ub <= desired_dist_ub #&& current_dist <= desired_dist_ub
det_agent2_ub
df_agent2_trimmed_ub <- df_agent2_trimmed_lb[det_agent2_ub,]
nrow(df_agent2_trimmed_ub)
fig_ub <- plot_ly(df_agent2_trimmed_ub, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
fig_ub
tag_ub <- df_agent2_trimmed_ub$gen.x * 0 + 2
df_agent2_trimmed_ub_tagged <- cbind(df_agent2_trimmed_ub, tag_ub)
####
# second_round
####
df_agent2.2 <- fct.make_sphere(100000, 144.6478, 86.09045, 11.33051, 16.20963 + 10 + 18.72)
df_agent2.2
# fig1 <- plot_ly(df_agent2, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
# fig1
# obst
obst.x.2 <- obst.x#150
obst.y.2 <- obst.y#112.6
desired_dist_lb.2 <- desired_dist_lb #18.75 + 10
desired_dist_ub.2 <- desired_dist_ub #18.75 + 10 + 2
# consider lower bound
current_dist_lb.2 <- sqrt((df_agent2.2$gen.x - obst.x.2)^2 + (df_agent2.2$gen.y - obst.y.2)^2)
current_dist_lb.2
det_agent2_lb.2 <- current_dist_lb.2 >= desired_dist_lb.2 #&& current_dist <= desired_dist_ub
det_agent2_lb.2
df_agent2_trimmed_lb.2 <- df_agent2.2[det_agent2_lb.2,]
nrow(df_agent2_trimmed_lb.2)
# fig_lb <- plot_ly(df_agent2_trimmed_lb, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
# fig_lb
# consider upper bound
current_dist_ub.2 <- sqrt((df_agent2_trimmed_lb.2$gen.x - obst.x.2)^2 + (df_agent2_trimmed_lb.2$gen.y - obst.y.2)^2)
det_agent2_ub.2 <- current_dist_ub.2 <= desired_dist_ub.2 #&& current_dist <= desired_dist_ub
det_agent2_ub.2
df_agent2_trimmed_ub.2 <- df_agent2_trimmed_lb.2[det_agent2_ub.2,]
nrow(df_agent2_trimmed_ub.2)
# fig_ub <- plot_ly(df_agent2_trimmed_ub, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, type = "scatter3d")
# fig_ub
tag_ub.2 <- df_agent2_trimmed_ub.2$gen.x * 0 + 3
df_agent2_trimmed_ub_tagged.2 <- cbind(df_agent2_trimmed_ub.2, tag_ub.2)
colnames(df_agent2_trimmed_ub_tagged.2) <- colnames(df_agent2_trimmed_ub_tagged)
############
# df from alg2_sep.R
############
tag_df2 <- df2$x * 0 + 1
df2_tagged <- cbind(df2, tag_df2)
df2_tagged$gen.z <- -df2_tagged$gen.z
# colnames(df_agent2_trimmed_ub_tagged)
colnames(df2_tagged) <- colnames(df_agent2_trimmed_ub_tagged)
###
###
# combine
###
###
combined_data <- rbind(df_agent2_trimmed_ub_tagged,df_agent2_trimmed_ub_tagged.2, df2_tagged)
# colnames(df_agent2_trimmed_ub_tagged.2)
# plot_ly(df2, x = ~x, y = ~y, z = ~-z, size = 1, type = "scatter3d")
# fig1 <- add_trace(p = fig1, x = ~dd$x, y = ~dd$y, z = ~dd$z, type = "mesh3d", opacity = 0.01)
fig_final <- plot_ly(combined_data, x = ~gen.x, y = ~gen.y, z = ~gen.z, size = 1, color = ~tag_ub, colors = c('red', 'blue', 'green'), type = "scatter3d")
fig_final
nrow(combined_data)
################################################################################
################################################################################
# plotly 3d plot
rm(list = ls())
library(plotly)
library("shotGroups")
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing")
datalist
i <- 9
filename <- datalist[i]
filename
param.mode.savePlot <- TRUE
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = TRUE, fileEncoding="UTF-8-BOM", as.is = 1)
# data_raw
plot_ly(data_raw, x = ~east, y = ~north, z = ~-down, color = ~agent, size = 1, colors = c('red', 'blue', 'green'))
# fig <- fig %>% add_markers()
# fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
#                                    yaxis = list(title = 'Gross horsepower'),
#                                    zaxis = list(title = '1/4 mile time')))
data_raw.agent1 <- data_raw[which(data_raw$agent == 1),]
data_raw.agent2 <- data_raw[which(data_raw$agent == 2),]
data_raw.agent3 <- data_raw[which(data_raw$agent == 3),]
for(mode.which in c('a1','a2','a3')){
# for(range_idx in 1:130) { #0:8){
mode.which <- 'a2'
for(range_idx in 0:18) { #0:8){
# mode.which <- 'l'
# range_idx <- 199
# range_idx <- 18
range_idx <- 18
range_start <- 1 #(10*range_idx) #1#
range_end <- (10*(range_idx+1)) # range_idx # #
if(mode.which == 'a1'){
temp_data <- data_raw.agent1
}else if(mode.which == 'a2'){
temp_data <- data_raw.agent2
}else if(mode.which == 'a3'){
temp_data <- data_raw.agent3
}
data_x <- temp_data$east[range_start:range_end]
data_y <- temp_data$north[range_start:range_end]
data_z <- temp_data$down[range_start:range_end]
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2), " norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), " var(x): ", var(data_x), " var(y): ", var(data_y), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(sd): ", sqrt((sd(data_x))^2+(sd(data_y))^2), " sd(x): ", sd(data_x), " sd(y): ", sd(data_y), "\n")
# cat(mode.which," ", range_idx," mean(x): ", mean(data_x), " mean(y): ", mean(data_y), " norm: ", sqrt((mean(data_x))^2+(mean(data_y))^2))
# cat(mode.which," ", range_idx," var(x): ", var(data_x), " var(y): ", var(data_y), " norm: ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
df2 = data.frame(data_x, data_y, data_z)
# refer: https://stats.stackexchange.com/questions/31726/scatterplot-with-contour-heat-overlay
colnames(df2) <- c('x', 'y', 'z')
df2
temp_CEPlevel <- 0.9
(cep <- getCEP(df2, CEPlevel=temp_CEPlevel, accuracy=FALSE,
dstTarget=10, conversion='m2mm',
type=c('Rayleigh')))
center_x <- cep$ctr[1]
center_y <- cep$ctr[2]
center_z <- cep$ctr[3]
center_r <- cep$CEP$CEP0.9['unit', 'Rayleigh']
temp_norm <- sqrt((center_x)^2+(center_y)^2+(center_z)^2)
cat(mode.which," ", range_idx," x/y/z/norm/r: ",center_x," ",center_y," ",center_z," ",temp_norm," ",center_r,"\n")
fig1 <- plot_ly(df2, x = ~x, y = ~y, z = ~-z, size = 1, type = "scatter3d")
r <- center_r
coord.x <- center_x
coord.y <-center_y
coord.z <- -center_z
dd <- transform(expand.grid(theta=seq(0,pi,length=100),
phi=seq(0,2*pi,length=200)),
x = coord.x + r*sin(theta)*cos(phi),
y = coord.y + r*sin(theta)*sin(phi),
z = coord.z + r*cos(theta))
fig1 <- add_trace(p = fig1, x = ~dd$x, y = ~dd$y, z = ~dd$z, type = "mesh3d", opacity = 0.01)
fig1
outputplotdir <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/02_01_output_plot/contour_",mode.which,"_",range_idx,".png",sep="" )
# if(param.mode.savePlot == TRUE) {png(outputplotdir, width = 500, height = 500, units = "px")}
export(fig, file = outputplotdir, selenium = 'webp')
# if(param.mode.savePlot == TRUE){dev.off()}
}
}
# refer: https://stackoverflow.com/questions/50412858/plotting-ellipse3d-in-r-plotly-with-surface-ellipse
filename
################################################################################
################################################################################
# plotly 3d plot
rm(list = ls())
library(plotly)
library("shotGroups")
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing")
datalist
i <- 9
filename <- datalist[i]
filename
param.mode.savePlot <- TRUE
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = TRUE, fileEncoding="UTF-8-BOM", as.is = 1)
# data_raw
plot_ly(data_raw, x = ~east, y = ~north, z = ~-down, color = ~agent, size = 1, colors = c('red', 'blue', 'green'))
# fig <- fig %>% add_markers()
# fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
#                                    yaxis = list(title = 'Gross horsepower'),
#                                    zaxis = list(title = '1/4 mile time')))
data_raw.agent1 <- data_raw[which(data_raw$agent == 1),]
data_raw.agent2 <- data_raw[which(data_raw$agent == 2),]
data_raw.agent3 <- data_raw[which(data_raw$agent == 3),]
for(mode.which in c('a1','a2','a3')){
# for(range_idx in 1:130) { #0:8){
mode.which <- 'a2'
for(range_idx in 0:18) { #0:8){
# mode.which <- 'l'
# range_idx <- 199
# range_idx <- 18
range_idx <- 18
range_start <- 1 #(10*range_idx) #1#
range_end <- (10*(range_idx+1)) # range_idx # #
if(mode.which == 'a1'){
temp_data <- data_raw.agent1
}else if(mode.which == 'a2'){
temp_data <- data_raw.agent2
}else if(mode.which == 'a3'){
temp_data <- data_raw.agent3
}
data_x <- temp_data$east[range_start:range_end]
data_y <- temp_data$north[range_start:range_end]
data_z <- temp_data$down[range_start:range_end]
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2), " norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), " var(x): ", var(data_x), " var(y): ", var(data_y), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(sd): ", sqrt((sd(data_x))^2+(sd(data_y))^2), " sd(x): ", sd(data_x), " sd(y): ", sd(data_y), "\n")
# cat(mode.which," ", range_idx," mean(x): ", mean(data_x), " mean(y): ", mean(data_y), " norm: ", sqrt((mean(data_x))^2+(mean(data_y))^2))
# cat(mode.which," ", range_idx," var(x): ", var(data_x), " var(y): ", var(data_y), " norm: ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
df2 = data.frame(data_x, data_y, data_z)
# refer: https://stats.stackexchange.com/questions/31726/scatterplot-with-contour-heat-overlay
colnames(df2) <- c('x', 'y', 'z')
df2
temp_CEPlevel <- 0.9
(cep <- getCEP(df2, CEPlevel=temp_CEPlevel, accuracy=FALSE,
dstTarget=10, conversion='m2mm',
type=c('Rayleigh')))
center_x <- cep$ctr[1]
center_y <- cep$ctr[2]
center_z <- cep$ctr[3]
center_r <- cep$CEP$CEP0.9['unit', 'Rayleigh']
temp_norm <- sqrt((center_x)^2+(center_y)^2+(center_z)^2)
cat(mode.which," ", range_idx," x/y/z/norm/r: ",center_x," ",center_y," ",center_z," ",temp_norm," ",center_r,"\n")
fig1 <- plot_ly(df2, x = ~x, y = ~y, z = ~-z, size = 1, type = "scatter3d")
r <- center_r
coord.x <- center_x
coord.y <-center_y
coord.z <- -center_z
dd <- transform(expand.grid(theta=seq(0,pi,length=100),
phi=seq(0,2*pi,length=200)),
x = coord.x + r*sin(theta)*cos(phi),
y = coord.y + r*sin(theta)*sin(phi),
z = coord.z + r*cos(theta))
fig1 <- add_trace(p = fig1, x = ~dd$x, y = ~dd$y, z = ~dd$z, type = "mesh3d", opacity = 0.01)
fig1
outputplotdir <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/02_01_output_plot/contour_",mode.which,"_",range_idx,".png",sep="" )
# if(param.mode.savePlot == TRUE) {png(outputplotdir, width = 500, height = 500, units = "px")}
export(fig, file = outputplotdir, selenium = 'webp')
# if(param.mode.savePlot == TRUE){dev.off()}
}
}
# refer: https://stackoverflow.com/questions/50412858/plotting-ellipse3d-in-r-plotly-with-surface-ellipse
datalist
################################################################################
################################################################################
# plotly 3d plot
rm(list = ls())
library(plotly)
library("shotGroups")
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing")
datalist
i <- 5
filename <- datalist[i]
filename
param.mode.savePlot <- TRUE
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = TRUE, fileEncoding="UTF-8-BOM", as.is = 1)
# data_raw
plot_ly(data_raw, x = ~east, y = ~north, z = ~-down, color = ~agent, size = 1, colors = c('red', 'blue', 'green'))
# fig <- fig %>% add_markers()
# fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
#                                    yaxis = list(title = 'Gross horsepower'),
#                                    zaxis = list(title = '1/4 mile time')))
data_raw.agent1 <- data_raw[which(data_raw$agent == 1),]
data_raw.agent2 <- data_raw[which(data_raw$agent == 2),]
data_raw.agent3 <- data_raw[which(data_raw$agent == 3),]
for(mode.which in c('a1','a2','a3')){
# for(range_idx in 1:130) { #0:8){
mode.which <- 'a2'
for(range_idx in 0:18) { #0:8){
# mode.which <- 'l'
# range_idx <- 199
# range_idx <- 18
range_idx <- 18
range_start <- 1 #(10*range_idx) #1#
range_end <- (10*(range_idx+1)) # range_idx # #
if(mode.which == 'a1'){
temp_data <- data_raw.agent1
}else if(mode.which == 'a2'){
temp_data <- data_raw.agent2
}else if(mode.which == 'a3'){
temp_data <- data_raw.agent3
}
data_x <- temp_data$east[range_start:range_end]
data_y <- temp_data$north[range_start:range_end]
data_z <- temp_data$down[range_start:range_end]
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2), " norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(variance): ", sqrt((var(data_x))^2+(var(data_y))^2), " var(x): ", var(data_x), " var(y): ", var(data_y), "\n")
# cat(mode.which," ", range_idx," norm(mean): ", sqrt((mean(data_x))^2+(mean(data_y))^2)," norm(sd): ", sqrt((sd(data_x))^2+(sd(data_y))^2), " sd(x): ", sd(data_x), " sd(y): ", sd(data_y), "\n")
# cat(mode.which," ", range_idx," mean(x): ", mean(data_x), " mean(y): ", mean(data_y), " norm: ", sqrt((mean(data_x))^2+(mean(data_y))^2))
# cat(mode.which," ", range_idx," var(x): ", var(data_x), " var(y): ", var(data_y), " norm: ", sqrt((var(data_x))^2+(var(data_y))^2), "\n")
df2 = data.frame(data_x, data_y, data_z)
# refer: https://stats.stackexchange.com/questions/31726/scatterplot-with-contour-heat-overlay
colnames(df2) <- c('x', 'y', 'z')
df2
temp_CEPlevel <- 0.9
(cep <- getCEP(df2, CEPlevel=temp_CEPlevel, accuracy=FALSE,
dstTarget=10, conversion='m2mm',
type=c('Rayleigh')))
center_x <- cep$ctr[1]
center_y <- cep$ctr[2]
center_z <- cep$ctr[3]
center_r <- cep$CEP$CEP0.9['unit', 'Rayleigh']
temp_norm <- sqrt((center_x)^2+(center_y)^2+(center_z)^2)
cat(mode.which," ", range_idx," x/y/z/norm/r: ",center_x," ",center_y," ",center_z," ",temp_norm," ",center_r,"\n")
fig1 <- plot_ly(df2, x = ~x, y = ~y, z = ~-z, size = 1, type = "scatter3d")
r <- center_r
coord.x <- center_x
coord.y <-center_y
coord.z <- -center_z
dd <- transform(expand.grid(theta=seq(0,pi,length=100),
phi=seq(0,2*pi,length=200)),
x = coord.x + r*sin(theta)*cos(phi),
y = coord.y + r*sin(theta)*sin(phi),
z = coord.z + r*cos(theta))
fig1 <- add_trace(p = fig1, x = ~dd$x, y = ~dd$y, z = ~dd$z, type = "mesh3d", opacity = 0.01)
fig1
outputplotdir <- paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/02_01_output_plot/contour_",mode.which,"_",range_idx,".png",sep="" )
# if(param.mode.savePlot == TRUE) {png(outputplotdir, width = 500, height = 500, units = "px")}
export(fig, file = outputplotdir, selenium = 'webp')
# if(param.mode.savePlot == TRUE){dev.off()}
}
}
# refer: https://stackoverflow.com/questions/50412858/plotting-ellipse3d-in-r-plotly-with-surface-ellipse
rm(list = ls())
library(plyr)
library(readr)
library(scales)
library(plyr)
library(conicfit) #library(concaveman)
library(geometry)
library(retistruct)
library("shotGroups")
# source("C:/Users/Chijung Jung/source/R_project/lib/functions.R")
source("~/Research/tool_project_swarm_safety/lib/functions.R") # Linux version
set.seed(1)
##############
# configurations
##############
param.mode.savePlot <- TRUE
# directory for input
# base_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/00_00_randomtesting/",sep="" )
# csv_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/pre/",sep="" )
output_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/output/",sep="" )
##############
# Reading data
# refer: https://lightblog.tistory.com/13
# factor, refer: https://rfriend.tistory.com/32
# which, refer: http://egloos.zum.com/entireboy/v/4837061
##############
# datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/incremental/input")
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/input")
# datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing")
datalist #seed_1_150_Ix2.0_new_restriction
filename = "crash_rt_from_various_var.txt"
# csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/",filename,sep="" )
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/input/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1)
nrow(data_raw)
head(data_raw, 5)
data_raw[which(data_raw$V2 == 'NA'),]
data_raw[which(data_raw$V2 == NA),]
head(data_raw, 5)
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1, dec = ",")
head(data_raw, 5)
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1, dec = " ")
head(data_raw, 5)
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1, sep = " ")
head(data_raw, 5)
data_raw[which(data_raw$V2 == 'this'),]
data_raw[which(data_raw$V1 == 'this'),]
data_raw[which(data_raw$V1 == 'this'),] + 1
data_raw[which(data_raw$V1 == 'this')+1,]
head(data_raw[which(data_raw$V1 == 'this')+1,], 5)
head(data_raw[which(data_raw$V1 == 'this'),], 5)
nrow(data_raw[which(data_raw$V1 == 'this'),])
nrow(data_raw[which(data_raw$V1 == 'this')+1,]
nrow(data_raw[which(data_raw$V1 == 'this')+1,])
nrow(data_raw[which(data_raw$V1 == 'this')+1,])
data_raw[which(data_raw$V1 == 'this')+1,]
iteration_name = data_raw[which(data_raw$V1 == 'this'),]
next_of_iteration = data_raw[which(data_raw$V1 == 'this')+1,]
final_analysis = cbind(iteration_name, next_of_iteration)
View(final_analysis)
output_file = paste(output_directory, "final_analysis_01.csv", sep = "")
write.csv(final_analysis,, row.names = FALSE)
write.csv(final_analysis,output_file, row.names = FALSE)
rm(list = ls())
library(plyr)
library(readr)
library(scales)
library(plyr)
library(conicfit) #library(concaveman)
library(geometry)
library(retistruct)
library("shotGroups")
# source("C:/Users/Chijung Jung/source/R_project/lib/functions.R")
source("~/Research/tool_project_swarm_safety/lib/functions.R") # Linux version
set.seed(1)
##############
# configurations
##############
param.mode.savePlot <- TRUE
output_directory = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/output/",sep="" )
##############
# Reading data
# refer: https://lightblog.tistory.com/13
# factor, refer: https://rfriend.tistory.com/32
# which, refer: http://egloos.zum.com/entireboy/v/4837061
##############
# datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/incremental/input")
datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/input")
# datalist <- list.files(path = "~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing")
datalist #seed_1_150_Ix2.0_new_restriction
i <- 1
filename <- datalist[i]
filename = "crash_rt_from_various_var.txt"
# csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/data/01_00_preprocessing/",filename,sep="" )
csvname = paste("~/Research/tool_project_swarm_safety/Preprocessing_R/2nd_alg/Analysis_res/input/",filename,sep="" )
data_raw <- read.csv(file = csvname, header = FALSE, fileEncoding="UTF-8-BOM", as.is = 1, sep = " ")
nrow(data_raw)
